// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * initial considerations:
 */

contract TitleData {

    // event emited when contract owner mints a nft title;
    // content should be reviewed, address _sender is the address 0x0, since it's minting;
    // (it's possible that the inherited function _mint does emits the event of creation as well, check this)
    event CreateTitle(address _sender, address _receiver, uint256 titleId);
    // since we have transfer function, we must inherit Transfer event as well;
    // transfers are done between users, then addresses are existent and registered ones.
    event Transfer(address _sender, address _receiver, uint256 titleId);

    // title identification number, auto generated by Counters.counter from Counters library;
    // (lacks implementation of Counters library)
    uint256 titleId;

    // struct carrying all necessary title infos, as address and coordinates;
    // (other title data as owners register and current owner are all already stored on the blockchain
    // transactions hashes. Worth to search how to analize the blockchain data concerning the transactions made
    // in order to track the titleId, also keep a easy visualized record of all transactions)
    struct TitleInfo {
        // physical address (ex: street, number, district, city, region, country, postal code, etc)
        string titleAddress;
        // gps coordinates of the land
        string titleCoordinates;
    }

    // tracks the amount of titles one specific addres has, this function is used by the bscscan explorer
    mapping(address => uint256) _balanceOf;
    // tracks the address owner of a specified titleId
    mapping(uint256 => address) _ownerOf;
    // tracks the TitleInfo data of an given titleId (same concept as UserInfo, check UserRegister.sol)
    mapping(uint256 => TitleInfo) _titleInfo;
    // return true if the titleId does exists, false if doesn't; (same case of UserExists, check UserRegister.sol)
    mapping(uint256 => bool) _titleExists;

    // the contract constructor should initialize the titleId variable as = 0;
    // once initialized, each title minted will increment titleId + 1;
    constructor () {
        titleId = 0;
    }

    /**
     *
     *
     *
     *
     */
    function mint(address _receiver, string memory _titleAddress, string memory _titleCoordinates) public returns (uint256 _titleId) {}

    /**
     *
     *
     *
     *
     */
    function transfer(address _sender, address _receiver, uint256 _titleId) public returns (bool success) {}
    
    /**
     * @
     *
     *
     *
     */
    function getTitleInfo(uint256 _tokenId) public returns (string memory, string memory) {}
    
    /**
     * @ownerOf is used to point the current user owner of an specified titleId;
     * @ could be used within other functions to provide a titleId - owner list, on the UI for example;
     * @ also could be used to validade ownership of the holding titles;
     * @returns the user address of the current owner.
     */
    function ownerOf(uint256 _tokenId) public returns (address userOwner) {}
    
    /**
     * @balanceOf is used by bscscan explorer and could be used to take total title balance an user holds
     * @ user a mapping variable to track the balance of an user;
     * @returns the given user amount of titles held.
     */
    function balanceOf(address _address) public view returns (uint256 balance) {}
    
    /**
     * @totalSuply is used by the bscscan explorer to track the amount of title emited, 
     * also could be called for other functions internally or externally the contract;
     *
     * @returns totalBalance of all titles already minted.
     */
    function totalSuply() public view returns (uint256 totalBalance) {}

    /**
     *
     *
     *
     */
    function newone() {}
}